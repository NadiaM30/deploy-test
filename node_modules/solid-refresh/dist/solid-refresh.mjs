import { createSignal, createMemo, untrack } from 'solid-js';

function hot$1(Comp, id, initialSignature, hot) {
    if (hot) {
        const [comp, setComp] = createSignal(Comp);
        const prev = hot.data;
        if (initialSignature) {
            const [sign, setSign] = createSignal(initialSignature);
            if (prev && prev[id] && prev[id].sign() !== initialSignature) {
                prev[id].setSign(() => initialSignature);
                prev[id].setComp(() => Comp);
            }
            hot.dispose(data => {
                data[id] = prev ? prev[id] : {
                    setComp,
                    sign,
                    setSign,
                };
            });
        }
        else {
            if (prev && prev[id]) {
                prev[id].setComp(() => Comp);
            }
            hot.dispose(data => {
                data[id] = prev ? prev[id] : {
                    setComp,
                };
            });
        }
        hot.accept();
        return new Proxy((props) => (createMemo(() => {
            const c = comp();
            if (c) {
                return untrack(() => c(props));
            }
            return undefined;
        })), {
            get(_, property) {
                return comp()[property];
            }
        });
    }
    return Comp;
}

function hot(Comp, id, initialSignature, isHot) {
    let Component = Comp;
    function handler(newModule) {
        const registration = newModule.$$registrations[id];
        registration.component.setComp = Comp.setComp;
        if (initialSignature) {
            registration.component.setSign = Comp.setSign;
            registration.component.sign = Comp.sign;
            if (registration.signature !== Comp.sign()) {
                Comp.setSign(() => registration.signature);
                Comp.setComp(() => registration.component);
            }
        }
        else {
            Comp.setComp(() => registration.component);
        }
    }
    if (isHot) {
        const [comp, setComp] = createSignal(Comp);
        Comp.setComp = setComp;
        if (initialSignature) {
            const [signature, setSignature] = createSignal(initialSignature);
            Comp.setSign = setSignature;
            Comp.sign = signature;
        }
        Component = new Proxy((props) => (createMemo(() => {
            const c = comp();
            if (c) {
                return untrack(() => c(props));
            }
            return undefined;
        })), {
            get(_, property) {
                return comp()[property];
            }
        });
    }
    return { Component, handler };
}

export { hot as esm, hot$1 as standard };
